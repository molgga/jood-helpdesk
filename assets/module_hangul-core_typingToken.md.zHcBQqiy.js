import{_ as s,c as i,o as a,U as t}from"./chunks/framework.WU9gZgzV.js";const E=JSON.parse('{"title":"hangul-core","description":"","frontmatter":{},"headers":[],"relativePath":"module/hangul-core/typingToken.md","filePath":"module/hangul-core/typingToken.md"}'),n={name:"module/hangul-core/typingToken.md"},e=t(`<h1 id="hangul-core" tabindex="-1">hangul-core <a class="header-anchor" href="#hangul-core" aria-label="Permalink to &quot;hangul-core&quot;">​</a></h1><h2 id="typingtoken" tabindex="-1">typingToken <a class="header-anchor" href="#typingtoken" aria-label="Permalink to &quot;typingToken&quot;">​</a></h2><p>초/중/종성을 타이핑 순서로 분리한다.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typingToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;푸&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &quot;ㅍ&quot;, &quot;푸&quot; ]   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typingToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;밟&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &quot;ㅂ&quot;, &quot;바&quot;, &quot;발&quot;, &quot;밟&quot; ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typingToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;꿍&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &quot;ㄲ&quot;, &quot;꾸&quot;, &quot;꿍&quot; ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typingToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;의&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &quot;ㅇ&quot;, &quot;으&quot;, &quot;의&quot; ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typingToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;왜&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &quot;ㅇ&quot;, &quot;오&quot;, &quot;왜&quot; ]</span></span></code></pre></div>`,4),h=[e];function l(k,p,o,r,d,u){return a(),i("div",null,h)}const c=s(n,[["render",l]]);export{E as __pageData,c as default};
